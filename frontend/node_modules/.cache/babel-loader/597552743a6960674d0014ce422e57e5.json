{"ast":null,"code":"import axios from 'axios';\nconst baseURL = process.env.NODE_ENV === 'production' ? '/api/' : '/api/';\n\nclass AxiosService {\n  constructor() {\n    this.axiosInstance = null;\n    this.initInstance();\n  }\n\n  initInstance() {\n    this.axiosInstance = axios.create({\n      baseURL,\n      timeout: 5000\n    });\n    this.axiosInstance.interceptors.request.use(config => {\n      const token = localStorage.getItem('freshbnb_token');\n      if (token) config.headers.Authorization = `Bearer ${token}`;\n      /* Bearer name changed*/\n\n      return config;\n    });\n  }\n\n  get freshbnbAxios() {\n    return this.axiosInstance;\n  }\n\n}\n\nexport default new AxiosService();","map":{"version":3,"sources":["D:/GitHub/Clones/Casa-de-vacaciones/frontend/src/services/axiosService.js"],"names":["axios","baseURL","process","env","NODE_ENV","AxiosService","constructor","axiosInstance","initInstance","create","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","freshbnbAxios"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,OAAxC,GAAkD,OAAlE;;AAEA,MAAMC,YAAN,CAAmB;AAGjBC,EAAAA,WAAW,GAAG;AAAA,SAFdC,aAEc,GAFE,IAEF;AACZ,SAAKC,YAAL;AACD;;AAEDA,EAAAA,YAAY,GAAG;AACb,SAAKD,aAAL,GAAqBP,KAAK,CAACS,MAAN,CAAa;AAChCR,MAAAA,OADgC;AAEhCS,MAAAA,OAAO,EAAE;AAFuB,KAAb,CAArB;AAIA,SAAKH,aAAL,CAAmBI,YAAnB,CAAgCC,OAAhC,CAAwCC,GAAxC,CAA6CC,MAAD,IAAY;AACtD,YAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAd;AACA,UAAIF,KAAJ,EAAWD,MAAM,CAACI,OAAP,CAAeC,aAAf,GAAgC,UAASJ,KAAM,EAA/C;AAAkD;;AAC7D,aAAOD,MAAP;AACD,KAJD;AAKD;;AAED,MAAIM,aAAJ,GAAoB;AAClB,WAAO,KAAKb,aAAZ;AACD;;AArBgB;;AAwBnB,eAAe,IAAIF,YAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\n\r\nconst baseURL = process.env.NODE_ENV === 'production' ? '/api/' : '/api/';\r\n\r\nclass AxiosService {\r\n  axiosInstance = null;\r\n\r\n  constructor() {\r\n    this.initInstance();\r\n  }\r\n\r\n  initInstance() {\r\n    this.axiosInstance = axios.create({\r\n      baseURL,\r\n      timeout: 5000,\r\n    });\r\n    this.axiosInstance.interceptors.request.use((config) => {\r\n      const token = localStorage.getItem('freshbnb_token');\r\n      if (token) config.headers.Authorization = `Bearer ${token}`; /* Bearer name changed*/\r\n      return config;\r\n    });\r\n  }\r\n\r\n  get freshbnbAxios() {\r\n    return this.axiosInstance;\r\n  }\r\n}\r\n\r\nexport default new AxiosService();\r\n"]},"metadata":{},"sourceType":"module"}