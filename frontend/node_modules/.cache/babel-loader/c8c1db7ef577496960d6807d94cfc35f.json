{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\Clones\\\\Casa-de-vacaciones\\\\frontend\\\\src\\\\components\\\\file-upload\\\\FileLoader.jsx\";\nimport React from 'react';\nimport { uploadImage } from 'services/cloudinaryService';\nimport { Spinner } from 'components/shared';\n\nclass FileLoader extends React.Component {\n  constructor() {\n    super();\n\n    this.changeImageStatus = imgStatus => this.setState({\n      imgStatus: imgStatus\n    });\n\n    this.handleImageLoad = ({\n      target: {\n        result: imgBase64\n      }\n    }) => {\n      this.setState({\n        imgBase64,\n        imgStatus: 'LOADED'\n      });\n    };\n\n    this.listenToFileLoading = () => {\n      this.fileReader.addEventListener('load', this.handleImageLoad);\n    };\n\n    this.removeFileLoadListener = () => {\n      this.fileReader.removeEventListener('load', this.handleImageLoad);\n    };\n\n    this.handleChange = event => {\n      this.selectedImg = event.target.files[0];\n      this.fileReader.readAsDataURL(this.selectedImg);\n    };\n\n    this.cancelImage = () => {\n      this.inputRef.current.value = null;\n      this.selectedImg = null;\n      this.setState({\n        imgBase64: '',\n        imgStatus: 'INIT'\n      });\n    };\n\n    this.handleImageUpload = () => {\n      this.changeImageStatus('PENDING'); // {console.log(this.selectedImg)}\n\n      uploadImage(this.selectedImg).then(uploadedImage => {\n        this.props.onFileUpload(uploadedImage._id);\n        this.changeImageStatus('UPLOADED');\n      }).catch(() => this.changeImageStatus('ERROR'));\n    };\n\n    this.inputRef = React.createRef();\n    this.fileReader = new FileReader();\n    this.selectedImg = null;\n    this.state = {\n      imgBase64: '',\n      imgStatus: 'INIT'\n    };\n  }\n\n  componentDidMount() {\n    this.listenToFileLoading();\n  }\n\n  componentWillUnmount() {\n    this.removeFileLoadListener();\n  }\n\n  render() {\n    const {\n      imgBase64,\n      imgStatus\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, \"Cover Image\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      accept: \".jpg, .png, .jpeg\",\n      onChange: this.handleChange,\n      ref: this.inputRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }), imgBase64 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"img\", {\n      src: imgBase64,\n      alt: \"preview\",\n      className: \"img-preview\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }), imgStatus === 'PENDING' && /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 41\n      }\n    }), imgStatus === 'UPLOADED' && /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 15\n      }\n    }, \"Image upload successfuly\", /*#__PURE__*/React.createElement(\"span\", {\n      role: \"img\",\n      \"aria-label\": \"icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, \"\\u2705\", ' ')), imgStatus === 'ERROR' && /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }, \"Image upload failed\", /*#__PURE__*/React.createElement(\"span\", {\n      role: \"img\",\n      \"aria-label\": \"icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, \"\\u274C\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"img-buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, imgStatus === 'LOADED' && /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleImageUpload,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, \"Upload\"), imgStatus !== 'UPLOADED' && /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.cancelImage,\n      className: \"img-buttons-cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, \"Cancel\"))));\n  }\n\n}\n\nexport default FileLoader;","map":{"version":3,"sources":["D:/GitHub/Clones/Casa-de-vacaciones/frontend/src/components/file-upload/FileLoader.jsx"],"names":["React","uploadImage","Spinner","FileLoader","Component","constructor","changeImageStatus","imgStatus","setState","handleImageLoad","target","result","imgBase64","listenToFileLoading","fileReader","addEventListener","removeFileLoadListener","removeEventListener","handleChange","event","selectedImg","files","readAsDataURL","cancelImage","inputRef","current","value","handleImageUpload","then","uploadedImage","props","onFileUpload","_id","catch","createRef","FileReader","state","componentDidMount","componentWillUnmount","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { uploadImage } from 'services/cloudinaryService';\r\n\r\nimport { Spinner } from 'components/shared';\r\n\r\nclass FileLoader extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.inputRef = React.createRef();\r\n    this.fileReader = new FileReader();\r\n    this.selectedImg = null;\r\n    this.state = {\r\n      imgBase64: '',\r\n      imgStatus: 'INIT',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.listenToFileLoading();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.removeFileLoadListener();\r\n  }\r\n\r\n  changeImageStatus = (imgStatus) => this.setState({ imgStatus: imgStatus });\r\n\r\n  handleImageLoad = ({ target: { result: imgBase64 } }) => {\r\n    this.setState({ imgBase64, imgStatus: 'LOADED' });\r\n  };\r\n\r\n  listenToFileLoading = () => {\r\n    this.fileReader.addEventListener('load', this.handleImageLoad);\r\n  };\r\n\r\n  removeFileLoadListener = () => {\r\n    this.fileReader.removeEventListener('load', this.handleImageLoad);\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.selectedImg = event.target.files[0];\r\n    this.fileReader.readAsDataURL(this.selectedImg);\r\n  };\r\n\r\n  cancelImage = () => {\r\n    this.inputRef.current.value = null;\r\n    this.selectedImg = null;\r\n    this.setState({ imgBase64: '', imgStatus: 'INIT' });\r\n  };\r\n\r\n  handleImageUpload = () => {\r\n    this.changeImageStatus('PENDING');\r\n    // {console.log(this.selectedImg)}\r\n    uploadImage(this.selectedImg)\r\n      .then((uploadedImage) => {\r\n        this.props.onFileUpload(uploadedImage._id);\r\n        this.changeImageStatus('UPLOADED');\r\n      })\r\n      .catch(() => this.changeImageStatus('ERROR'));\r\n  };\r\n\r\n  render() {\r\n    const { imgBase64, imgStatus } = this.state;\r\n    return (\r\n      <div className='input'>\r\n        <label>Cover Image</label>\r\n        <input\r\n          type='file'\r\n          accept='.jpg, .png, .jpeg'\r\n          onChange={this.handleChange}\r\n          ref={this.inputRef}\r\n        />\r\n        {imgBase64 && (\r\n          <>\r\n            <img src={imgBase64} alt='preview' className='img-preview' />\r\n        \r\n            {/* {console.log(\"This is upload\")} */}\r\n          \r\n            {imgStatus === 'PENDING' && <Spinner />}\r\n            {/* {console.log(\"This is upload after pending\")} */}\r\n            {imgStatus === 'UPLOADED' && (\r\n              \r\n              <span>\r\n                Image upload successfuly\r\n                <span role='img' aria-label='icon'>\r\n                  ✅{' '}\r\n                </span>\r\n              </span>\r\n            )}\r\n            {imgStatus === 'ERROR' && (\r\n              <span>\r\n                Image upload failed\r\n                <span role='img' aria-label='icon'>\r\n                  ❌\r\n                </span>\r\n              </span>\r\n            )}\r\n            <div className='img-buttons'>\r\n\r\n              {imgStatus === 'LOADED' && (\r\n\r\n                <button onClick={this.handleImageUpload}>Upload</button>\r\n                \r\n              )}\r\n              {/* {console.log(\"This is loaded\")} */}\r\n              {imgStatus !== 'UPLOADED' && (\r\n                <button\r\n                  onClick={this.cancelImage}\r\n                  className='img-buttons-cancel'\r\n                >\r\n                  Cancel\r\n                </button>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FileLoader;\r\n"]},"metadata":{},"sourceType":"module"}